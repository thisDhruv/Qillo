const express = require("express");
const User = require("../models/User");
const { body, validationResult } = require("express-validator");
const bcrypt = require("bcrypt"); //npm package used to store encrypted password
const jwt = require("jsonwebtoken");
const fetchuser = require("../middleware/FetchUser");
const JWT_SECRET = "thesecret@@ram2String1914forJWT$";

const router = express.Router();

//ROUTE 1: create user
// Router for api/auth/createUser, to create a new user
router.post(
  "/createUser",
  [
    body("email", "Enter a valid Email").isEmail(),
    body("name", "Enter a valid name").isLength({ min: 3 }),
    body("password", "Password must be atleast 8 characters long").isLength({
      min: 8,
    }),
  ],
  async (req, res) => {
    try {
      //check validationResults (express-validation code)
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }

      //check for email duplicacy, must be unique
      let userWithMailDuplicacy = await User.findOne({ email: req.body.email });
      if (userWithMailDuplicacy)
        return res.status(400).send("This email is already in use");

      //generate encrypted password
      let salt = await bcrypt.genSaltSync(10);
      let cipherPassword = await bcrypt.hash(req.body.password, salt);

      //create user using User schema from User.js mongoose.model of schema
      const user = await User.create({
        name: req.body.name,
        email: req.body.email,
        password: cipherPassword,
      });

      //Generate JWT Token(for particular user using ID, generated by mongoDB automatically) and send to client
      const data = {
        user: {
          id: user.id,
        },
      };
      const authtoken = jwt.sign(data, JWT_SECRET);

      res.status(200).send({authToken: authtoken });
    } catch (error) {
      console.error(error);
      res.status(500).send("Internal Server Error");
    }
  }
);

//ROUTE 2: Login Existing User
// Router for api/auth/login, to login existing user
router.post(
  "/login",
  [
    body("email", "Enter a valid Email").isEmail(),
    body("password", "Password cannot be empty").exists(),
  ],
  async (req, res) => {
    try {
      //check validationResults (express-validation code)
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }

      //check if email exists
      let user = await User.findOne({ email: req.body.email });
      if (!user)
        return res.status(401).send("Please login with correct credentials");

      //check password
      const match = await bcrypt.compare(req.body.password, user.password);

      if (match===false) return res.status(401).send("Please login with correct credentials");

      //Generate JWT Token(for particular user using ID, generated by mongoDB automatically) and send to client
      const data = {
        user: {
          id: user.id,
        },
      };
      const authtoken = jwt.sign(data, JWT_SECRET);

      res.status(200).send({authToken: authtoken });
    } catch (error) {}
  }
);

//ROUTE 3: Getting details of existing user (A LOGIN REQUIRED ROUTE)
router.post("/getuser", fetchuser, async (req, res) => {
  try {
    //find user by this ID, select everything but password
    const user = await User.findById(req.user.id).select("-password");
     return res.send(user);
  } catch (error) {
    return res.status(500).send("Internal Server Error");
  }
});

module.exports = router;
